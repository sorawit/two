package util

object ErrText {
  def undefined(id: String) = s"Variable \'${id}\' has not yet declared."
  def undefinedmethod(id: String) = s"Method \'${id}\' has not yet declared."
  def variablemismatch(id: String) = s"Variable \'${id}\' type mismatch."
  def scalarmismatch(id: String) = s"Variable \'${id}\' type mismatch. It has not been declared as a scalar."
  def arraymismatch(id: String) = s"Variable \'${id}\' type mismatch. It has not been declared as an array."
  def indexmismatch(id: String) = s"Index of an array \'${id}\' must be of type integer."
  def indexnegative(id: String) = s"Index of an array \'${id}\' location must not be negative."
  def assignmentmismatch(id: String) = s"Assignment to variable \'${id}\': type mismatch."
  def assignnonint(id: String) = s"Assignment to variable \'${id}\' type mismatch: using += or -= must be only for integer."
  def methodmismatch(id: String) = s"\'${id}\' is not declared as a method or callout."
  def sizemismatch(id: String) = s"Variable \'${id}\' must be an array in order to use @."
  def negativemismatch() = s"Negative opertation must follow by integer expression."
  def negatemismatch() = s"Negate opertation must follow by boolean expression."
  def methodparamsmissing(id: String) = s"Mismatch parameters of method \'${id}\'."
  def binopintmismatch() = s"Binary Integer opertation must follow by both integer expressions."
  def binopeqmismatch() = s"Binary (non?) equal opertation must follow by both expressions of same types."
  def binopboolmismatch() = s"Binary Boolean opertation must follow by both boolean expressions."
  def ternaryexprmismatch() = s"The two expressions phrase of ternary expression must be of the same type."
  def ternarycondmismatch() = s"The condition phrase of ternary expression must be a boolean expression."
  def intoverflow(id: String) = s"Integer \'${id}\' does not fit in 64-bit." 
  def duplicatecallout(id: String) = s"Duplicate declaration of callout \'${id}\'." 
  def duplicatefield(id: String) = s"Duplicate declaration of field \'${id}\'." 
  def duplicatemethod(id: String) = s"Duplicate declaration of method \'${id}\'." 
  def duplicatemethodparams(id: String) = s"Duplicate parameter names in method \'${id}\'." 
  def invalidforcond() = s"The start and stop expressions of for condition must be integer type."
  def invalidwhilecond() = s"The expression inside while condition must be boolean type"
  def invalidwhilelimit() = s"Invalid while loop iteration limit integer."
  def returnnoneed() = s"The method is declared as void. No need for returning a value."
  def returnmismatch() = s"The returned value does not corresponding to the method declaration type."
  def returnnotinmethod() = s"Return statement must be inside a method."
  def breaknotinloop() = s"Break statement must be in a loop structure (for/while)." 
  def continuenotinloop() = s"Continue statement must be in a loop structure (for/while)." 
  def voidasexpr(id: String) = s"Cannot use void method: \'${id}\' as an expression."
  def nomain() = s"Missing main method that has no parameters."
  def badarraysize(id: String) = s"Array \'${id}\' has invalid size."
}
